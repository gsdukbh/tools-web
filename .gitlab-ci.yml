# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
- test
- build
- build_image
- deploy
- review
- dast
- staging
- canary
- production
- incremental rollout 10%
- incremental rollout 25%
- incremental rollout 50%
- incremental rollout 100%
- performance
- cleanup
test-job:
  stage: test
  tags:
  - arm64
  image: gradle:7.4-jdk17
  script:
  - gradle build
  - echo "Compile complete."
build-job:
  stage: build
  only:
  - tags
  tags:
  - arm64
  image: gradle:7.4-jdk17
  script:
  - gradle bootJar
  - echo "Compile complete."
  artifacts:
    expire_in: 1 days
    paths:
    - build
build_image-job:
  stage: build_image
  image: docker:latest
  services:
  - docker:dind
  only:
  - tags
  needs:
  - job: build-job
    artifacts: true
  tags:
  - arm64
  variables:
    IMAGE_TAG: "$DOCKER_NAME/$CI_PROJECT_NAME:$CI_COMMIT_TAG"
    LATEST: "$DOCKER_NAME/$CI_PROJECT_NAME:latest"
  script:
    - docker buildx ls
    - docker run --privileged --rm tonistiigi/binfmt --install all
    - docker buildx create --use --name mybuilder
    - docker buildx  build --load --platform  linux/amd64,linux/arm64 -t $IMAGE_TAG -f Dockerfile ./
    - docker tag $IMAGE_TAG $LATEST
    - docker login -u $DOCKER_NAME -p $DOCKER_PASSWORD
    - docker push  $LATEST
    - docker rmi $IMAGE_TAG
    - docker rmi $LATEST


deploy-job: # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  only:
  - tags
  needs:
  - job: build_image-job
  before_script:
  - command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client
    -y )
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  - apt-get install rsync -y
  script:
  - rsync -avz -e ssh --include docker-compose.yml ./deploy $DEPLOY_HOST_NAME@$DEPLOY_HOST:/tools
  - ssh -T $DEPLOY_HOST_NAME@$DEPLOY_HOST < ./deploy/bash.sh
  - echo "Deploying application..."
  - echo "Application successfully deployed."
#sast:
#  stage: test
#include:
#- template: Auto-DevOps.gitlab-ci.yml
