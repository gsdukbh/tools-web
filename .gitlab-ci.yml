# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
#    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#    - docker build -t $IMAGE_TAG .
#    - docker push $IMAGE_TAG
#    - docker rmi $IMAGE_TAG
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

stages: # List of stages for jobs, and their order of execution
  - build
  - build_image
  - deploy
#build-job: # This job runs in the build stage, which runs first.
#  stage: build
#  tags:
#    - arm64
#  image: gradle:7.4-jdk17
#  script:
#    - gradle build
#    - echo "Compile complete."
#  artifacts:
#    expire_in: 3 days
#    paths:
#      - build

#build_image-job:
#  stage: build_image
#  image: docker:latest
#  services:
#    - docker:dind
#  only:
#    - tags
#  needs:
#     - job: build-job
#       artifacts: true
#  tags:
#    - arm64
#  variables:
#    IMAGE_TAG: $DOCKER_NAME/$CI_PROJECT_NAME:$CI_COMMIT_TAG
#    LATEST: $DOCKER_NAME/$CI_PROJECT_NAME:latest
#  script:
#    - docker run --privileged --rm tonistiigi/binfmt --install all
#    - docker buildx  build --platform linux/arm64 -t $IMAGE_TAG -f Dockerfile ./
#    - docker tag $IMAGE_TAG $LATEST
#    - docker login -u $DOCKER_NAME -p $DOCKER_PASSWORD
#    - docker push  $LATEST
#    - docker rmi $IMAGE_TAG


deploy-job: # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#  only:
#    - tags
#  needs:
#    - job: build_image-job
  variables:
    IMAGE_TAG: $DOCKER_NAME/$CI_PROJECT_NAME:$CI_COMMIT_TAG
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "$IMAGE_TAG"
    - sed -i "s/IMAGE_TAG/$IMAGE_TAG/" docker-compose.yml
    - rsync -avz -e ssh --include docker-compose.yml / $DEPLOY_HOST_NAME@$DEPLOY_HOST:/tools
    - ssh -T $DEPLOY_HOST_NAME@$DEPLOY_HOST < bash.sh
    - echo "Deploying application..."
    - echo "Application successfully deployed."
