# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
  - test
  - build
  - build_image
  - deploy
  - deploy-image
  - cleanup
test-job:
  stage: test
  tags:
    - arm64
  image: gradle:jdk21-graal
  script:
    - gradle build
    - echo "Compile complete."
build-job:
  stage: build
  only:
    - tags
  tags:
    - arm64
  image: gradle:jdk21-graal
  script:
    - gradle bootJar
    - echo "Compile complete."
  artifacts:
    expire_in: 1 days
    paths:
      - build/libs
#build_image-job:
#  stage: build_image
#  image: docker:latest
#  services:
#    - docker:dind
#  only:
#    - tags
#  needs:
#    - job: build-job
#      artifacts: true
#  tags:
#    - arm64
#  variables:
#    IMAGE_TAG: "$DOCKER_NAME/$CI_PROJECT_NAME:$CI_COMMIT_TAG"
#    LATEST: "$DOCKER_NAME/$CI_PROJECT_NAME:latest"
#  script:
#    - docker login -u $DOCKER_NAME -p $DOCKER_PASSWORD
#    - docker buildx ls
#    - docker run --privileged --rm tonistiigi/binfmt --install all
#    - docker buildx create --use --name mybuilder
#    - docker buildx  build --platform  linux/amd64,linux/arm64 --push -t $IMAGE_TAG -f Dockerfile ./


#deploy-job: # This job runs in the deploy stage.
#  stage: deploy-image  # It only runs when *both* jobs in the test stage complete successfully.
#  only:
#    - tags
#  needs:
#    - job: build_image-job
#  variables:
#    IMAGE_TAG: $DOCKER_NAME\/$CI_PROJECT_NAME:$CI_COMMIT_TAG
#  before_script:
#    - command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client
#      -y )
#    - eval $(ssh-agent -s)
#    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#    - mkdir -p ~/.ssh
#    - chmod 700 ~/.ssh
#    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
#    - chmod 644 ~/.ssh/known_hosts
#    - apt-get install rsync -y
#  script:
#    - sed -i "s/IMAGE_TAG/$IMAGE_TAG/g" ./deploy/docker-compose.yml
#    - rsync -avz -e ssh --include docker-compose.yml ./deploy $DEPLOY_HOST_NAME@$DEPLOY_HOST:/tools
#    - ssh -T $DEPLOY_HOST_NAME@$DEPLOY_HOST < ./deploy/bash.sh
#    - echo "Application successfully deployed."

test-job-2:
  stage: test
  variables:
    IMAGE_TAG: "$DOCKER_NAME/$CI_PROJECT_NAME:1"
  script:
    - echo "$IMAGE_TAG"
    - sed -i "s/IMAGE_TAG/$IMAGE_TAG/g" ./deploy/docker-compose.yml
    - cat ./deploy/docker-compose.yml

deploy-job2:
  stage: deploy
  only:
    - tags
  needs:
    - job: build-job
      artifacts: true
  variables:
    IMAGE_TAG: "$DOCKER_NAME/$CI_PROJECT_NAME:$CI_COMMIT_TAG"
  before_script:
    - command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client
      -y )
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - apt-get install rsync -y
  script:
    - echo "$IMAGE_TAG"
    - sed -i "s/IMAGE_TAG/$IMAGE_TAG/g" ./deploy/docker-compose.yml
    - cat ./deploy/docker-compose.yml
    # upload jar
    - rsync -avz -e ssh --include build/libs ./deploy $DEPLOY_HOST_NAME@$DEPLOY_HOST:/tools/build/libs
    # upload Dockerfile
    - rsync -avz -e ssh --include Dockerfile ./deploy $DEPLOY_HOST_NAME@$DEPLOY_HOST:/tools
    - rsync -avz -e ssh --include docker-compose.yml ./deploy $DEPLOY_HOST_NAME@$DEPLOY_HOST:/tools
    - ssh -T $DEPLOY_HOST_NAME@$DEPLOY_HOST < ./deploy/bash.sh
    - echo "Application successfully deployed."
#sast:
#  stage: test
#include:
#- template: Auto-DevOps.gitlab-ci.yml
